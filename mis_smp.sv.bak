module msi_smp(input logic clk, reset,
            output logic [31:0] WriteDataM[1:0],
            output logic [31:0] DataAdrM[1:0],
            output logic MemReadM[1:0],
            output logic MemWriteM[1:0],
            output logic PCstall[1:0],
            output logic [31:0] PCF[1:0], 
            output logic [31:0] InstrF[1:0], 
            output logic [31:0] ReadDataM[1:0],
            output logic [31:0] dec[1:0]
	);
    //all declerations of dmem pins
	logic [3:0] mem_address[1:0];
	
	logic [1:0] bus_requests[1:0];
	logic [3:0] bus_request_mem_address[1:0],
	logic [1:0] bus_data_found;
	logic [31:0] bus_data_delivery[1:0];
	
	logic [31:0] mem_data_delivery[1:0];
    logic [1:0] tag_bit[1:0];
	
	logic [31:0] data_out_cpu[1:0];

	logic [1:0] cpu_write_back[1:0], bus_write_back;
	logic [3:0] address_out_mem_cpu[1:0];
    logic [3:0] address_out_mem_bus[1:0];
	logic [31:0] data_out_mem_cpu[1:0];
    logic [31:0] data_out_mem_bus[1:0];

	logic [1:0] bus_reply_abort_mem_access;
	logic [31:0] bus_reply_data_found[1:0];
	
	logic [3:0] ask_mem_address[1:0];
	logic [1:0] bus_reply[1:0];

    logic i;
    generate
        for (i = 0; i< 2 ; i++) begin: multicore 
            riscv core[i](clk, reset, PCF[i], InstrF[i], MemReadM[i], MemWriteM[i], PCstall[i], DataAdrM[i], WriteDataM[i], ReadDataM[i], dec[i]);
            imem imem[i](PCF[i], InstrF[i]);
            dmem dmem[i](
                clk,
                MemReadM[i], 
                MemWriteM[i], 
                WriteDataM[i], 
                DataAdrM[i], 

                .bus_request[i](bus_reply[~i]), 
                .bus_request_mem_address[i](ask_mem_address[~i]), 

                .bus_data_found[i](bus_reply_abort_mem_access[~i]),
                .bus_data_delivery[i](bus_reply_data_found[~i]),
                
                .mem_data_delivery[i],
                tag_bit[i],
                .data_out_cpu[i](ReadDataM[i]),
                cpu_write_back[i], 
                bus_write_back[i],
                address_out_mem_cpu[i],
                address_out_mem_bus[i], 
                data_out_mem_cpu[i], 
                data_out_mem_bus[i],
                bus_reply_abort_mem_access[i],
                bus_reply_data_found[i],
                ask_mem_address[i],
                bus_reply[i]);
        end
    endgenerate
    mmemory ram_(
    .clk(clk),
	.address_read1(ask_mem_address[0]),
    .address_read2(ask_mem_address[1]),
	.write1(cpu_write_back[0]), 
    .write2(bus_write_back[0]), 
    .write3(cpu_write_back[1]), 
    .write4(bus_write_back[1]),
	.address_write1(address_out_mem_cpu[0]),
    .address_write2(address_out_mem_bus[0]),
    .address_write3(address_out_mem_cpu[1]),
    .address_write4(address_out_mem_bus[1]), 
	.data_write1(data_out_mem_cpu[0]), 
    .data_write2(data_out_mem_bus[1]),
    .data_write3(data_out_mem_cpu[0]), 
    .data_write4(data_out_mem_bus[1]),
	
	.tag_bit1(tag_bit[0]), 
    .tag_bit2(tag_bit[1]),
	.readed1(mem_data_delivery[0]),
    .readed2(mem_data_delivery[1]));

endmodule
